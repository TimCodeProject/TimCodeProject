#Источник: Региональный Этап олимпиады ВСОШ по информатике 2022 года
#Оригинальное решение задачи на Python: Александр Николаевич Иванов
#Перевел на TimCode: Тимофей Бадаев

из математика использовать арктангенс2, пи

ПОГРЕШНОСТЬ = 1e-10


класс Треугольник:
    __слоты__ = ['стороны', 'углы', '_сдвиг']

    @статический_метод
    определить get_side_square(dx: int, dy: int) -> int:
        вернуть dx * dx + dy * dy

    @статический_метод
    определить get_angle2(dx1: int, dy1: int, dx0: int, dy0: int) -> float:
        вернуть модуль(atan2(dx1 * dy0 - dx0 * dy1, dx1 * dx0 + dy1 * dy0))

    определить __иниц__(self, x1: int, y1: int, x2: int, y2: int, x3: int, y3: int):
        dx1 = x2 - x1
        dy1 = y2 - y1
        dx2 = x3 - x2
        dy2 = y3 - y2
        dx3 = x1 - x3
        dy3 = y1 - y3
        сам.стороны = [
            сам.get_side_square(dx1, dy1),
            сам.get_side_square(dx2, dy2),
            сам.get_side_square(dx3, dy3)
        ]
        сам.углы = [
            сам.get_angle2(dx1, dy1, -dx3, -dy3),
            сам.get_angle2(dx2, dy2, -dx1, -dy1),
            сам.get_angle2(dx3, dy3, -dx2, -dy2)
        ]
        сам._shift = 0

    определить вращать(сам, сдвиг: число) -> отсутствует:
        self._shift = shift

    определить угол(сам, n: число) -> дробь:
        return self.angles[(n + self._shift) % 3]


вывод()
n = число(ввод())
множества = множество()
треугольники = []
для _ внутри диапазон(n):
    треугольники.добавить(Треугольник(*отображение(число, ввод().разделить())))
для i, треуг внутри перечислять(треугольники, 1):                          # Центральный треугольник
    треуг.вращать(0)
    для i1, треуг1 внутри перечислять(треугольники, 1):                    # 1 внешний треугольник
        если i == i1:
            продолжить
        для сторона1 внутри диапазон(3):
            треуг1.вращать(side1)
            если треуг.стороны[0] != треуг1.стороны[сторона1]:
                продолжить
            для i2, треуг2 внутри перечислять(треугольники, 1):            # 2 внешний треугольник
                если i2 == i или i2 == i1:
                    продолжить
                для сторона2 внутри диапазон(3):
                    треуг2.вращать(сторона2)
                    если треуг.стороны[1] != треуг2.стороны[сторона2]:
                        продолжить
                    для i3, треуг3 внутри перечислять(треугольники, 1):    # 3 внешний треугольник
                        если i3 == i или i3 == i1 или i3 == i2:
                            продолжить
                        набор = неизменяемое_множество({i, i1, i2, i3})
                        если набор внутри множества:
                            продолжить
                        для сторона3 внутри диапазон(3):
                            треуг3.вращать(side3)
                            если треуг.стороны[2] != треуг3.стороны[сторона3]:
                                продолжить
                            # Проверка на существование треугольника
                            угол1 = треуг.угол(0) + треуг1.угол(1) + треуг3.угол(0)
                            если модуль(угол1 - пи) > ПОГРЕШНОСТЬ:
                                продолжить
                            угол2 = треуг.угол(1) + треуг2.угол(1) + треуг1.угол(0)
                            если модуль(угол2 - пи) > ПОГРЕШНОСТЬ:
                                продолжить
                            угол3 = треуг.угол(2) + треуг3.угол(1) + треуг2.угол(0)
                            если модуль(угол3 - пи) > ПОГРЕШНОСТЬ:
                                продолжить
                            множества.добавить(набор)

множества = [' '.соединить(отображение(строка, колонка)) для колонка внутри множества]
вывод(длина(множества))
вывод('\n'.соединить(множества))