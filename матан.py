import re
import cmath
from sympy import (
    symbols, diff, integrate, limit, oo, sqrt, sin, cos, tan, log, exp, Eq, solve, dsolve, Function, 
    simplify, expand, factor, series, apart, gamma, factorial, Sum, Product, pi, E, I, zoo, Rational, polygamma
)

# Определяем символы для sympy
x, y, z, n, k = symbols('x y z n k')

# Словарь для перевода иностранных терминов
переводы = {
    "Integrate": "Интеграл",
    "Integral": "Интеграл",
    "Derivative": "Производная",
    "Limit": "Предел",
    "Sum": "Сумма",
    "Product": "Произведение",
    "gamma": "гамма",
    "polygamma": "полигамма",
    "exp": "экспонента",
    "log": "логарифм",
    "sin": "синус",
    "cos": "косинус",
    "tan": "тангенс",
    "sqrt": "квадратный корень",
    "pi": "пи",
    "E": "e",
    "I": "i",
    "factorial": "факториал",
    "oo": "бесконечность",
    "zoo": "комплексная бесконечность",
    "Rational": "рациональное число",
    "Eq": "уравнение",
    "Symbol": "символ",
    "Function": "функция",
    "dsolve": "решение дифференциального уравнения",
    "simplify": "упрощение",
    "expand": "раскрытие",
    "factor": "разложение на множители",
    "series": "ряд",
    "apart": "разложение на дроби",
}

def перевести_выражение(выражение):
    """
    Заменяет английские термины в выражении на русские, избегая частичных замен.
    """
    # Сортируем ключи по длине (от большего к меньшему), чтобы избежать частичных замен
    sorted_keys = sorted(переводы.keys(), key=len, reverse=True)
    
    # Проходим по каждому ключу и заменяем его в выражении
    for key in sorted_keys:
        # Используем регулярное выражение для замены только целых слов
        выражение = re.sub(r'\b' + re.escape(key) + r'\b', переводы[key], выражение)
    
    return выражение

def производная(функция, переменная='x'):
    """
    Функция для нахождения производной математической функции,
    заданной в виде строки, с использованием sympy.
    Пользователь может указать переменную дифференцирования.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        производная_expr = diff(expr, var)
        return перевести_выражение(str(производная_expr))
    except Exception as e:
        return f"Ошибка при вычислении производной: {e}"

def неопределенный_интеграл(функция, переменная='x'):
    """
    Функция для нахождения неопределенного интеграла математической функции,
    заданной в виде строки, с использованием sympy.
    Пользователь может указать переменную интегрирования.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        интеграл_expr = integrate(expr, var)
        return перевести_выражение(str(интеграл_expr)) + " + C"
    except Exception as e:
        return f"Ошибка при вычислении интеграла: {e}"

def определенный_интеграл(функция, a, b, переменная='x'):
    """
    Функция для нахождения определенного интеграла математической функции,
    заданной в виде строки, с использованием sympy.
    Пользователь может указать переменную интегрирования.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        интеграл_expr = integrate(expr, (var, a, b))
        return перевести_выражение(str(интеграл_expr))
    except Exception as e:
        return f"Ошибка при вычислении интеграла: {e}"

def предел(функция, x_0, переменная='x'):
    """
    Функция для вычисления предела функции f(x) при x стремящемся к x_0,
    с использованием sympy.
    Пользователь может указать переменную.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        предел_expr = limit(expr, var, x_0)
        return перевести_выражение(str(предел_expr))
    except Exception as e:
        return f"Ошибка при вычислении предела: {e}"

def упростить(выражение):
    """
    Функция для упрощения математического выражения с использованием sympy.
    """
    try:
        expr = eval(выражение, globals())
        упрощенное_expr = simplify(expr)
        return перевести_выражение(str(упрощенное_expr))
    except Exception as e:
        return f"Ошибка при упрощении выражения: {e}"

def решить_дифференциальное_уравнение(уравнение, начальные_условия=None):
    """
    Функция для решения дифференциального уравнения с использованием sympy.
    Пользователь может указать начальные условия.
    """
    try:
        f = Function('f')(x)
        expr = eval(уравнение, globals(), {'f': f})
        решение = dsolve(expr, f)
        
        if начальные_условия:
            решение = решение.subs(начальные_условия)
        
        return перевести_выражение(str(решение))
    except Exception as e:
        return f"Ошибка при решении дифференциального уравнения: {e}"

def разложить_на_множители(выражение):
    """
    Функция для разложения выражения на множители с использованием sympy.
    """
    try:
        expr = eval(выражение, globals())
        разложенное_expr = factor(expr)
        return перевести_выражение(str(разложенное_expr))
    except Exception as e:
        return f"Ошибка при разложении на множители: {e}"

def разложить_в_ряд(выражение, точка=0, n=5):
    """
    Функция для разложения выражения в ряд Тейлора с использованием sympy.
    """
    try:
        expr = eval(выражение, globals())
        ряд_expr = series(expr, x, точка, n)
        return перевести_выражение(str(ряд_expr))
    except Exception as e:
        return f"Ошибка при разложении в ряд: {e}"

def разложить_на_дроби(выражение):
    """
    Функция для разложения выражения на простые дроби с использованием sympy.
    """
    try:
        expr = eval(выражение, globals())
        дроби_expr = apart(expr)
        return перевести_выражение(str(дроби_expr))
    except Exception as e:
        return f"Ошибка при разложении на дроби: {e}"

def раскрыть_скобки(выражение):
    """
    Функция для раскрытия скобок в выражении с использованием sympy.
    """
    try:
        expr = eval(выражение, globals())
        раскрытое_expr = expand(expr)
        return перевести_выражение(str(раскрытое_expr))
    except Exception as e:
        return f"Ошибка при раскрытии скобок: {e}"

### Новые команды, связанные с автосуммированием и другими возможностями sympy

def сумма(выражение, переменная, нижний_предел, верхний_предел):
    """
    Вычисляет сумму выражения по заданной переменной в пределах.
    """
    try:
        var = symbols(переменная)
        expr = eval(выражение, globals(), {переменная: var})
        сумма_expr = Sum(expr, (var, нижний_предел, верхний_предел)).doit()
        return перевести_выражение(str(сумма_expr))
    except Exception as e:
        return f"Ошибка при вычислении суммы: {e}"

def произведение(выражение, переменная, нижний_предел, верхний_предел):
    """
    Вычисляет произведение выражения по заданной переменной в пределах.
    """
    try:
        var = symbols(переменная)
        expr = eval(выражение, globals(), {переменная: var})
        произведение_expr = Product(expr, (var, нижний_предел, верхний_предел)).doit()
        return перевести_выражение(str(произведение_expr))
    except Exception as e:
        return f"Ошибка при вычислении произведения: {e}"

def факториал(число):
    """
    Вычисляет факториал числа.
    """
    try:
        return перевести_выражение(str(factorial(число)))
    except Exception as e:
        return f"Ошибка при вычислении факториала: {e}"

def гамма_функция(число):
    """
    Вычисляет значение гамма-функции для заданного числа.
    """
    try:
        return перевести_выражение(str(gamma(число)))
    except Exception as e:
        return f"Ошибка при вычислении гамма-функции: {e}"

def биномиальный_коэффициент(n, k):
    """
    Вычисляет биномиальный коэффициент C(n, k).
    """
    try:
        return перевести_выражение(str(factorial(n) / (factorial(k) * factorial(n - k))))
    except Exception as e:
        return f"Ошибка при вычислении биномиального коэффициента: {e}"

def числовая_оценка(выражение):
    """
    Вычисляет числовое значение выражения.
    """
    try:
        expr = eval(выражение, globals())
        return перевести_выражение(str(expr.evalf()))
    except Exception as e:
        return f"Ошибка при числовой оценке: {e}"

def предел_бесконечность(функция, переменная='x'):
    """
    Вычисляет предел функции при переменной, стремящейся к бесконечности.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        предел_expr = limit(expr, var, oo)
        return перевести_выражение(str(предел_expr))
    except Exception as e:
        return f"Ошибка при вычислении предела: {e}"

def предел_минус_бесконечность(функция, переменная='x'):
    """
    Вычисляет предел функции при переменной, стремящейся к минус бесконечности.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        предел_expr = limit(expr, var, -oo)
        return перевести_выражение(str(предел_expr))
    except Exception as e:
        return f"Ошибка при вычислении предела: {e}"

def предел_в_точке(функция, точка, переменная='x'):
    """
    Вычисляет предел функции в заданной точке.
    """
    try:
        var = symbols(переменная)
        expr = eval(функция, globals(), {переменная: var})
        предел_expr = limit(expr, var, точка)
        return перевести_выражение(str(предел_expr))
    except Exception as e:
        return f"Ошибка при вычислении предела: {e}"

def числовая_сумма(выражение, переменная, нижний_предел, верхний_предел):
    """
    Вычисляет числовое значение суммы выражения по заданной переменной в пределах.
    """
    try:
        var = symbols(переменная)
        expr = eval(выражение, globals(), {переменная: var})
        сумма_expr = Sum(expr, (var, нижний_предел, верхний_предел)).doit()
        return перевести_выражение(str(сумма_expr.evalf()))
    except Exception as e:
        return f"Ошибка при вычислении суммы: {e}"

# Примеры использования функций
#print(производная("gamma(x)", "x"))  # Производная гамма-функции
#print(неопределенный_интеграл("gamma(x)", "x"))  # Интеграл гамма-функции
#print(сумма("1/k**2", "k", 1, 10))  # Сумма 1/k^2 от k=1 до 10
#print(гамма_функция(5))  # Гамма-функция от 5
#print(биномиальный_коэффициент(5, 2))  # Биномиальный коэффициент C(5, 2)
#print(числовая_оценка("pi**2 + E"))  # Числовая оценка выражения pi^2 + E
#print(предел_бесконечность("1/x", "x"))  # Предел 1/x при x -> ∞
